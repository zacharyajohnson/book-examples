!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/zjohnson/workspace/personal/zacharyajohnson/notes/nonfiction/crafting-interpreters/chapter-17-compiling-expressions/example/lox/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C!function	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C!struct	foreigndecl	/declared in foreign languages/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
BINARY_OP	vm.c	/^#define BINARY_OP(/;"	d	file:
Chunk	chunk.h	/^}Chunk;$/;"	t	typeref:struct:__anonc3a0ef940208
DEBUG_PRINT_CODE	common.h	/^#define DEBUG_PRINT_CODE$/;"	d
DEBUG_TRACE_EXECUTION	common.h	/^#define DEBUG_TRACE_EXECUTION$/;"	d
FREE_ARRAY	memory.h	/^#define FREE_ARRAY(/;"	d
GROW_ARRAY	memory.h	/^#define GROW_ARRAY(/;"	d
GROW_CAPACITY	memory.h	/^#define GROW_CAPACITY(/;"	d
INTERPRET_COMPILE_ERROR	vm.h	/^        INTERPRET_COMPILE_ERROR,$/;"	e	enum:__anon7c9f9a3e0203
INTERPRET_OK	vm.h	/^        INTERPRET_OK,$/;"	e	enum:__anon7c9f9a3e0203
INTERPRET_RUNTIME_ERROR	vm.h	/^        INTERPRET_RUNTIME_ERROR$/;"	e	enum:__anon7c9f9a3e0203
InterpretResult	vm.h	/^} InterpretResult;$/;"	t	typeref:enum:__anon7c9f9a3e0203
OP_ADD	chunk.h	/^        OP_ADD,$/;"	e	enum:__anonc3a0ef940103
OP_CONSTANT	chunk.h	/^        OP_CONSTANT,$/;"	e	enum:__anonc3a0ef940103
OP_DIVIDE	chunk.h	/^        OP_DIVIDE,$/;"	e	enum:__anonc3a0ef940103
OP_MULTIPLY	chunk.h	/^        OP_MULTIPLY,$/;"	e	enum:__anonc3a0ef940103
OP_NEGATE	chunk.h	/^        OP_NEGATE,$/;"	e	enum:__anonc3a0ef940103
OP_RETURN	chunk.h	/^        OP_RETURN,$/;"	e	enum:__anonc3a0ef940103
OP_SUBTRACT	chunk.h	/^        OP_SUBTRACT,$/;"	e	enum:__anonc3a0ef940103
OpCode	chunk.h	/^}OpCode;$/;"	t	typeref:enum:__anonc3a0ef940103
PREC_AND	compiler.c	/^        PREC_AND, \/\/ and$/;"	e	enum:__anon8a0484b10203	file:
PREC_ASSIGNMENT	compiler.c	/^        PREC_ASSIGNMENT, \/\/ =$/;"	e	enum:__anon8a0484b10203	file:
PREC_CALL	compiler.c	/^        PREC_CALL, \/\/ . ()$/;"	e	enum:__anon8a0484b10203	file:
PREC_COMPARISON	compiler.c	/^        PREC_COMPARISON, \/\/ < > <= >=$/;"	e	enum:__anon8a0484b10203	file:
PREC_EQUALITY	compiler.c	/^        PREC_EQUALITY, \/\/ == !=$/;"	e	enum:__anon8a0484b10203	file:
PREC_FACTOR	compiler.c	/^        PREC_FACTOR, \/\/ * \/$/;"	e	enum:__anon8a0484b10203	file:
PREC_NONE	compiler.c	/^        PREC_NONE,$/;"	e	enum:__anon8a0484b10203	file:
PREC_OR	compiler.c	/^        PREC_OR, \/\/ or$/;"	e	enum:__anon8a0484b10203	file:
PREC_PRIMARY	compiler.c	/^        PREC_PRIMARY$/;"	e	enum:__anon8a0484b10203	file:
PREC_TERM	compiler.c	/^        PREC_TERM, \/\/ + -$/;"	e	enum:__anon8a0484b10203	file:
PREC_UNARY	compiler.c	/^        PREC_UNARY, \/\/ ! -$/;"	e	enum:__anon8a0484b10203	file:
ParseFn	compiler.c	/^typedef void (*ParseFn)();$/;"	t	typeref:typename:void (*)()	file:
ParseRule	compiler.c	/^} ParseRule;$/;"	t	typeref:struct:__anon8a0484b10308	file:
Parser	compiler.c	/^} Parser;$/;"	t	typeref:struct:__anon8a0484b10108	file:
Precedence	compiler.c	/^} Precedence;$/;"	t	typeref:enum:__anon8a0484b10203	file:
READ_BYTE	vm.c	/^#define READ_BYTE(/;"	d	file:
READ_CONSTANT	vm.c	/^#define READ_CONSTANT(/;"	d	file:
STACK_MAX	vm.h	/^#define STACK_MAX /;"	d
Scanner	scanner.c	/^} Scanner;$/;"	t	typeref:struct:__anond6e0f0600108	file:
TOKEN_AND	scanner.h	/^        TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_BANG	scanner.h	/^        TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_BANG_EQUAL	scanner.h	/^        TOKEN_BANG, TOKEN_BANG_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_CLASS	scanner.h	/^        TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_COMMA	scanner.h	/^        TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_DOT	scanner.h	/^        TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_ELSE	scanner.h	/^        TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_EOF	scanner.h	/^        TOKEN_ERROR, TOKEN_EOF$/;"	e	enum:__anond6e0f0650103
TOKEN_EQUAL	scanner.h	/^        TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_EQUAL_EQUAL	scanner.h	/^        TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_ERROR	scanner.h	/^        TOKEN_ERROR, TOKEN_EOF$/;"	e	enum:__anond6e0f0650103
TOKEN_FALSE	scanner.h	/^        TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,$/;"	e	enum:__anond6e0f0650103
TOKEN_FOR	scanner.h	/^        TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_FUN	scanner.h	/^        TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_GREATER	scanner.h	/^        TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_GREATER_EQUAL	scanner.h	/^        TOKEN_GREATER, TOKEN_GREATER_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_IDENTIFIER	scanner.h	/^        TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anond6e0f0650103
TOKEN_IF	scanner.h	/^        TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_LEFT_BRACE	scanner.h	/^        TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anond6e0f0650103
TOKEN_LEFT_PAREN	scanner.h	/^        TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anond6e0f0650103
TOKEN_LESS	scanner.h	/^        TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_LESS_EQUAL	scanner.h	/^        TOKEN_LESS, TOKEN_LESS_EQUAL,$/;"	e	enum:__anond6e0f0650103
TOKEN_MINUS	scanner.h	/^        TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_NIL	scanner.h	/^        TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_NUMBER	scanner.h	/^        TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anond6e0f0650103
TOKEN_OR	scanner.h	/^        TOKEN_FOR, TOKEN_FUN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,$/;"	e	enum:__anond6e0f0650103
TOKEN_PLUS	scanner.h	/^        TOKEN_COMMA, TOKEN_DOT, TOKEN_MINUS, TOKEN_PLUS,$/;"	e	enum:__anond6e0f0650103
TOKEN_PRINT	scanner.h	/^        TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_RETURN	scanner.h	/^        TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_RIGHT_BRACE	scanner.h	/^        TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,$/;"	e	enum:__anond6e0f0650103
TOKEN_RIGHT_PAREN	scanner.h	/^        TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,$/;"	e	enum:__anond6e0f0650103
TOKEN_SEMICOLON	scanner.h	/^        TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anond6e0f0650103
TOKEN_SLASH	scanner.h	/^        TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anond6e0f0650103
TOKEN_STAR	scanner.h	/^        TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,$/;"	e	enum:__anond6e0f0650103
TOKEN_STRING	scanner.h	/^        TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,$/;"	e	enum:__anond6e0f0650103
TOKEN_SUPER	scanner.h	/^        TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_THIS	scanner.h	/^        TOKEN_PRINT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,$/;"	e	enum:__anond6e0f0650103
TOKEN_TRUE	scanner.h	/^        TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anond6e0f0650103
TOKEN_VAR	scanner.h	/^        TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anond6e0f0650103
TOKEN_WHILE	scanner.h	/^        TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE,$/;"	e	enum:__anond6e0f0650103
Token	scanner.h	/^} Token;$/;"	t	typeref:struct:__anond6e0f0650208
TokenType	scanner.h	/^} TokenType;$/;"	t	typeref:enum:__anond6e0f0650103
VM	vm.h	/^} VM;$/;"	t	typeref:struct:__anon7c9f9a3e0108
Value	value.h	/^typedef double Value;$/;"	t	typeref:typename:double
ValueArray	value.h	/^} ValueArray;$/;"	t	typeref:struct:__anon694036180108
__anon694036180108	value.h	/^typedef struct {$/;"	s
__anon7c9f9a3e0108	vm.h	/^typedef struct {$/;"	s
__anon7c9f9a3e0203	vm.h	/^typedef enum {$/;"	g
__anon8a0484b10108	compiler.c	/^typedef struct {$/;"	s	file:
__anon8a0484b10203	compiler.c	/^typedef enum {$/;"	g	file:
__anon8a0484b10308	compiler.c	/^typedef struct {$/;"	s	file:
__anonc3a0ef940103	chunk.h	/^typedef enum {$/;"	g
__anonc3a0ef940208	chunk.h	/^typedef struct {$/;"	s
__anond6e0f0600108	scanner.c	/^typedef struct {$/;"	s	file:
__anond6e0f0650103	scanner.h	/^typedef enum {$/;"	g
__anond6e0f0650208	scanner.h	/^typedef struct {$/;"	s
addConstant	chunk.c	/^int addConstant(Chunk* chunk, Value value) {$/;"	f	typeref:typename:int
advance	compiler.c	/^static void advance() {$/;"	f	typeref:typename:void	file:
advance	scanner.c	/^static char advance() {$/;"	f	typeref:typename:char	file:
binary	compiler.c	/^static void binary() {$/;"	f	typeref:typename:void	file:
capacity	chunk.h	/^        int capacity;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:int
capacity	value.h	/^        int capacity;$/;"	m	struct:__anon694036180108	typeref:typename:int
checkKeyword	scanner.c	/^static TokenType checkKeyword(int start, int length,$/;"	f	typeref:typename:TokenType	file:
chunk	vm.h	/^        Chunk* chunk;$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:Chunk *
clox_chunk_h	chunk.h	/^#define clox_chunk_h$/;"	d
clox_common_h	common.h	/^#define clox_common_h$/;"	d
clox_compiler_h	compiler.h	/^#define clox_compiler_h$/;"	d
clox_debug_h	debug.h	/^#define clox_debug_h$/;"	d
clox_memory_h	memory.h	/^#define clox_memory_h$/;"	d
clox_scanner_h	scanner.h	/^#define clox_scanner_h$/;"	d
clox_value_h	value.h	/^#define clox_value_h$/;"	d
clox_vm_h	vm.h	/^#define clox_vm_h$/;"	d
code	chunk.h	/^        uint8_t* code;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:uint8_t *
compile	compiler.c	/^bool compile(const char* source, Chunk* chunk) {$/;"	f	typeref:typename:bool
compilingChunk	compiler.c	/^Chunk* compilingChunk;$/;"	v	typeref:typename:Chunk *
constantInstruction	debug.c	/^static int constantInstruction(const char* name, Chunk* chunk, int offset) {$/;"	f	typeref:typename:int	file:
constants	chunk.h	/^        ValueArray constants;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:ValueArray
consume	compiler.c	/^static void consume(TokenType type, const char* message) {$/;"	f	typeref:typename:void	file:
count	chunk.h	/^        int count;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:int
count	value.h	/^        int count;$/;"	m	struct:__anon694036180108	typeref:typename:int
current	compiler.c	/^        Token current;$/;"	m	struct:__anon8a0484b10108	typeref:typename:Token	file:
current	scanner.c	/^        const char* current;$/;"	m	struct:__anond6e0f0600108	typeref:typename:const char *	file:
currentChunk	compiler.c	/^static Chunk* currentChunk() {$/;"	f	typeref:typename:Chunk *	file:
disassembleChunk	debug.c	/^void disassembleChunk(Chunk* chunk, const char* name) {$/;"	f	typeref:typename:void
disassembleInstruction	debug.c	/^int disassembleInstruction(Chunk* chunk, int offset) {$/;"	f	typeref:typename:int
emitByte	compiler.c	/^static void emitByte(uint8_t byte) {$/;"	f	typeref:typename:void	file:
emitBytes	compiler.c	/^static void emitBytes(uint8_t byte1, uint8_t byte2) {$/;"	f	typeref:typename:void	file:
emitConstant	compiler.c	/^static void emitConstant(Value value) {$/;"	f	typeref:typename:void	file:
emitReturn	compiler.c	/^static void emitReturn() {$/;"	f	typeref:typename:void	file:
endCompiler	compiler.c	/^static void endCompiler() {$/;"	f	typeref:typename:void	file:
error	compiler.c	/^static void error(const char* message) {$/;"	f	typeref:typename:void	file:
errorAt	compiler.c	/^static void errorAt(Token* token, const char* message) {$/;"	f	typeref:typename:void	file:
errorAtCurrent	compiler.c	/^static void errorAtCurrent(const char* message) {$/;"	f	typeref:typename:void	file:
errorToken	scanner.c	/^static Token errorToken(const char* message) {$/;"	f	typeref:typename:Token	file:
expression	compiler.c	/^static void expression() {$/;"	f	typeref:typename:void	file:
freeChunk	chunk.c	/^void freeChunk(Chunk* chunk) {$/;"	f	typeref:typename:void
freeVM	vm.c	/^void freeVM() {$/;"	f	typeref:typename:void
freeValueArray	value.c	/^void freeValueArray(ValueArray* array) {$/;"	f	typeref:typename:void
getRule	compiler.c	/^static ParseRule* getRule(TokenType type) {$/;"	f	typeref:typename:ParseRule *	file:
grouping	compiler.c	/^static void grouping() {$/;"	f	typeref:typename:void	file:
hadError	compiler.c	/^        bool hadError;$/;"	m	struct:__anon8a0484b10108	typeref:typename:bool	file:
identifier	scanner.c	/^static Token identifier() {$/;"	f	typeref:typename:Token	file:
identifierType	scanner.c	/^static TokenType identifierType() {$/;"	f	typeref:typename:TokenType	file:
infix	compiler.c	/^        ParseFn infix;$/;"	m	struct:__anon8a0484b10308	typeref:typename:ParseFn	file:
initChunk	chunk.c	/^void initChunk(Chunk* chunk) {$/;"	f	typeref:typename:void
initScanner	scanner.c	/^void initScanner(const char* source) {$/;"	f	typeref:typename:void
initVM	vm.c	/^void initVM() {$/;"	f	typeref:typename:void
initValueArray	value.c	/^void initValueArray(ValueArray* array) {$/;"	f	typeref:typename:void
interpret	vm.c	/^InterpretResult interpret(const char* source) {$/;"	f	typeref:typename:InterpretResult
ip	vm.h	/^        uint8_t* ip;$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:uint8_t *
isAlpha	scanner.c	/^static bool isAlpha(char c) {$/;"	f	typeref:typename:bool	file:
isAtEnd	scanner.c	/^static bool isAtEnd() {$/;"	f	typeref:typename:bool	file:
isDigit	scanner.c	/^static bool isDigit(char c) {$/;"	f	typeref:typename:bool	file:
length	scanner.h	/^        int length;$/;"	m	struct:__anond6e0f0650208	typeref:typename:int
line	scanner.c	/^        int line;$/;"	m	struct:__anond6e0f0600108	typeref:typename:int	file:
line	scanner.h	/^        int line;$/;"	m	struct:__anond6e0f0650208	typeref:typename:int
lines	chunk.h	/^        int* lines;$/;"	m	struct:__anonc3a0ef940208	typeref:typename:int *
main	main.c	/^int main(int argc, const char* argv[]) {$/;"	f	typeref:typename:int
makeConstant	compiler.c	/^static uint8_t makeConstant(Value value) {$/;"	f	typeref:typename:uint8_t	file:
makeToken	scanner.c	/^static Token makeToken(TokenType type) {$/;"	f	typeref:typename:Token	file:
match	scanner.c	/^static bool match(char expected) {$/;"	f	typeref:typename:bool	file:
number	compiler.c	/^static void number() {$/;"	f	typeref:typename:void	file:
number	scanner.c	/^static Token number() {$/;"	f	typeref:typename:Token	file:
panicMode	compiler.c	/^        bool panicMode;$/;"	m	struct:__anon8a0484b10108	typeref:typename:bool	file:
parsePrecedence	compiler.c	/^static void parsePrecedence(Precedence precedence) {$/;"	f	typeref:typename:void	file:
parser	compiler.c	/^Parser parser;$/;"	v	typeref:typename:Parser
peek	scanner.c	/^static char peek() {$/;"	f	typeref:typename:char	file:
peekNext	scanner.c	/^static char peekNext() {$/;"	f	typeref:typename:char	file:
pop	vm.c	/^Value pop() {$/;"	f	typeref:typename:Value
precedence	compiler.c	/^        Precedence precedence;$/;"	m	struct:__anon8a0484b10308	typeref:typename:Precedence	file:
prefix	compiler.c	/^        ParseFn prefix;$/;"	m	struct:__anon8a0484b10308	typeref:typename:ParseFn	file:
previous	compiler.c	/^        Token previous;$/;"	m	struct:__anon8a0484b10108	typeref:typename:Token	file:
printValue	value.c	/^void printValue(Value value) {$/;"	f	typeref:typename:void
push	vm.c	/^void push(Value value) {$/;"	f	typeref:typename:void
readFile	main.c	/^static char* readFile(const char* path) {$/;"	f	typeref:typename:char *	file:
reallocate	memory.c	/^void* reallocate(void* pointer, size_t oldSize, size_t newSize) {$/;"	f	typeref:typename:void *
repl	main.c	/^static void repl() {$/;"	f	typeref:typename:void	file:
resetStack	vm.c	/^static void resetStack() {$/;"	f	typeref:typename:void	file:
rules	compiler.c	/^ParseRule rules[] = {$/;"	v	typeref:typename:ParseRule[]
run	vm.c	/^static InterpretResult run() {$/;"	f	typeref:typename:InterpretResult	file:
runFile	main.c	/^static void runFile(const char* path) {$/;"	f	typeref:typename:void	file:
scanToken	scanner.c	/^Token scanToken() {$/;"	f	typeref:typename:Token
scanner	scanner.c	/^Scanner scanner;$/;"	v	typeref:typename:Scanner
simpleInstruction	debug.c	/^static int simpleInstruction(const char* name, int offset) {$/;"	f	typeref:typename:int	file:
skipWhitespace	scanner.c	/^static void skipWhitespace() {$/;"	f	typeref:typename:void	file:
stack	vm.h	/^        Value stack[STACK_MAX];$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:Value[]
stackTop	vm.h	/^        Value* stackTop;$/;"	m	struct:__anon7c9f9a3e0108	typeref:typename:Value *
start	scanner.c	/^        const char* start;$/;"	m	struct:__anond6e0f0600108	typeref:typename:const char *	file:
start	scanner.h	/^        const char* start;$/;"	m	struct:__anond6e0f0650208	typeref:typename:const char *
string	scanner.c	/^static Token string() {$/;"	f	typeref:typename:Token	file:
type	scanner.h	/^        TokenType type;$/;"	m	struct:__anond6e0f0650208	typeref:typename:TokenType
unary	compiler.c	/^static void unary() {$/;"	f	typeref:typename:void	file:
values	value.h	/^        Value* values;$/;"	m	struct:__anon694036180108	typeref:typename:Value *
vm	vm.c	/^VM vm;$/;"	v	typeref:typename:VM
writeChunk	chunk.c	/^void writeChunk(Chunk* chunk, uint8_t byte, int line) {$/;"	f	typeref:typename:void
writeValueArray	value.c	/^void writeValueArray(ValueArray* array, Value value) {$/;"	f	typeref:typename:void
