01/12/24 8:52PM EST

Pointer - a variable that contains the address of a variable.
        Very powerful, can create consise good but can make programs
        very hard to understand if used incorrectly

5.1: Pointers and Arrays
        Computer memory is organized as an array
        of consecutively numbered or addressed memory cells that
        can be manipulated individually or in contiguous groups.

        A pointer is a group of cells(often two or four) that
        can hold an address of a variable.
                Ex: C is a char and p is a pointer that points
                    to the address c is located.

        Unary operator & - gives the address of an object
                Ex: p = &c
                    Assigns the address of c to the variable p.

                    P is said to "point to" c.


                Only applies to objects in memory: variables and array elements.
                They cannot be applied to expressions, constants, or register variables

        Unary operator * - indirection or dereferencing operator.
                When applied to a pointer, it accesses the object the pointer
                points to.

                Ex:
                        int x = 1, y = 2;
                        int *ip;

                        ip = &x; /* ip now ponts to int */
                        y = *ip; /* y is now 1 */

        Pointers can be used as function arguments and return values

        Each pointer points to a certain data type(except void)

5.2: Pointers and Function Arguments
        Since C passes arguments to functions by value, there is no direct way for the called
        function to alter a vvariable in the calling function.

        Ex: swap(a,b)
        See example/swap.c

        Since the int arguments are call by value, the swap function only alters the copies,
        not the original variables.

        The way to alter variables paassed into functions is by using pointers to the values
        to be changed
                Ex: swap(&a, &b);

        Pointer arguments enable a function to access and change objects in the function that called it.
        
        Ex: int getint(int *pn) - get next integer from input into *pn
        See example/getint.c

        getint returns the int parsed from input and stores it in *pn.
        Return value is either the char input stopped on, EOF, or
        0 if the input stream was not parsed as a digit

        getch/ungetch are used so the one extra character that must be read
        can be pushed back onto the input

01/13/2024

5.3: Pointers and Arrays
        There is a strong relationship between pointers and arrays.
        Any operation that can be done with array subscripting can be
        done with pointers.

        The pointer version will typically be faster, but harder
        to understand.

        Ex:
                int a[10]; - defines an array a of size 10, that is,
                a block of 10 consecutive objects named a[0], a[1], etc

                The notation a[i] refers to the i-th element of the array.
                If pa is a pointer to an integer, declared as

                        int *pa;

                then the assignment

                        pa = &a[0];

                sets pa to point to element zero of a;

                If pa points to a particular element of an array, then
                by definition pa+1 points to the next element, pa+i points
                i elements after pa, and pa-i points i elements before.

                This is true regardless of type or size of the variables in
                array a. "Adding 1 to a pointer" and all other pointer
                arithmetic controls what the pointer points to in relation
                to itself.

        The value of a variable or expression of type array is the address
        of element zero of the array.

        Ex: pa = &a[0] could be written as pa = a;

        There is one difference between an array name and a pointer.
        A pointer is a variable , so pa=a and pa++ are legal. An array
        name is not a variable, so those operations are illegal for array.

        When an array name is passed to a function, what is passed is the location
        of the initial element. Within the called function, this argument is a local
        variable, and so an array name parameter is a pointer, that is, a variable containing
        an address.

        See example/strlen.c

        char s[] vs char *s are the same in function definitions.
        Pointers are a little bit more flexible and clear. Functions
        can treat an array as a pointer/array whenever they see fit.

        You can pass part of an array to a function, by passing a pointer
        to the beginning of the subarray.

                Ex: f(&a[2]) or f(a+2)

        It is illegal to refer to objects that are not within the array bounds
        i.e, before element 0. However, nothing in C stops you from doing it.

5.4: Address Arithmetic
        If p is a pointer to some element of an array, then p++ increments p to point
        to the next element, and p+=1 increments it to point i elements beyond where it
        currently does.

        Example: alloc.c - rudimentary storage allocator.

                See example/alloc.c

                This implmenentation is stack based, last-in first out. This
                is a problem because you have to free the most recent chuck of
                memory first before the others can.

        C guarantees that zero is never a valid address for data, so
        it can be returned as an error code.

        Pointers and integers are not interchangeable, zero is the
        sole exception. The symoblic constant NULL is oftern used in
        place of zero, as a mnemoic to indicate more cleary that zero
        is a special value for a pointer.

        Pointers may be compared when they both point to members of
        the same array. This must be true for for relations like
        ==, !=, <, >=, etc to work properly
                Ex: p < q is true if p points to an earlier member of the array than q does

        Any pointer can be meaningfully compared for equality or inequality with zero.

        The behavior is undefined for arithmetic or comparisons with pointers that do not
        point to members of the same array.
                One exception: the address of the frist element past the end of an
                an array can be used in pointer arithmetic

        p + n - Address of the n-th object beyond the one p currently points to.
        Regardless of object p points to; n is scaled according to the size of
        the objects p points to, which is determined by the declaration of p.
                Ex: If an int is four bytes, n will scaled by four

        Pointer subtraction
                If p and q point to elements of the same array, and p < q,
                then q - p + 1 is the number of elements from p to q inclusive.

        Pointer arithmetic is consistent between types, since it takes into
        account the sizes of the object the pointer points to.

        Valid Pointer Operations
                Assignment of pointers of the same type

                Adding or subtracting a pointer and an integer

                Subtracting or comparing two pointers to members of the
                same array.

                Assigning or comparing to zero

        Illegal Pointer Operations
                Adding two pointers

                Multiplying or dividing pointers

                Shifting or masking pointers

                Adding float or double to a pointer

                Assigning a pointer of one type to a
                pointer of another type without a cast
                        void * is the exception

5.5: Character Pointers and Functions
        A string constant, written as

                "I am a string"

        is an array of characters. The array is
        terminated with the null character '\0' so
        that programs can find the end. The length in
        storage i s one more than the number of characters
        between the double quotes.

        String constants are accessed by a pointer to its first element
                Ex: printf("hello, world\n");

        String constants can be assigned to char pointers
                Ex:
                        char *pmessage;
                        pmessage = "now is the time";

                        This is not a string copy, only pointers
                        are involved

        Subtle difference between these definitions:
                char amessage[] = "now is the time"; /* an array */
                char *pmessage = "now is the time"; /* a pointer */

                amessage is an array that is just big enough to hold the
                the sequence of characters and '\0'. Individual characters
                within the array may be changed but amessage will always
                refer to the same storage.

                pmessage is a pointer, initialized to point to a string
                constant; the pointer may subsequently be modified to point
                elsewhere, but the result is undefined if you try to modify
                the string contents

        Comparisons between array functions and pointer functions:
                See example/strcpy-array.c and example/strcpy-pointer.c
                See example/strcmp-array.c and example/strcmp-pointer.c

                Since arguments are passed by value, advance the pointers passed
                into the function will not alter the original. Since they are
                pointers to the same location as the original, however, any
                changes to the values in the pointer will reflect in the
                original.

        <string.h> contains declarations for the functions mentioned in this section
        plus a lot of other string handling functions.

5.6: Pointer Arrays; Pointers to Pointers
        Pointers are variables so they can be be stored in arrays just like other
        variables.

        Ex: Sort - Program that will sort a set of text lintes into alphabetic order.
        See example/sort.c

        We need a data representation that will cop efficiently and conveniently with variable-length
        text lines
                This is where array of pointers come into play

        The pointers to the lines of text are stored in an array.
        The lines can be compared to sort them, and when they need their
        location to be changed we can just swap the pointers in the array.

        Three steps to sorting:
                Read all the lines of input
                Sort them
                Print them in order

01/14/2024 1:26AM EST

5.7: Multi-dimensional Arrays
        Ex:
                day_of_year - converts the month and day into the day of the year
                month_day - converts the day of the year into the month and day.

                See example/date-conversion.c

        Since the days of the year depend on if its a leap year or not, its
        easier to storage the different number of days in a month in a
        multi dimensional array instead of trying to figure it out in
        the code.

        A two dimensional array is really a one-dimensional array, each of whose
        elements is an array.

        Subscripts are written as

                daytab[i][j]

        In the daytab example, we started with a zero for each column
        so the months can start at 1 and end at 12.

5.8: Initialization of Pointer Arrays
        Array of pointers.
        Can be initalized just like normal variables, especially
        if char pointers

5.9: Pointers vs Multi-dimensional Arrays
        What is the difference between a two-dimensional
        array and an array of pointers.

        Ex: int a[10][20] vs int *b[10];

        In a two-dimensional array, 200 int-sized locations have
        been allocated. In a pointer of arrays, the definition
        only allocates 10 pointers and does not initialize them.
        Initialization must be done explicitly, either statically or
        with code.

        Assuming that each element of b does pont to a twenty-element
        array, then there will be 200 ints set aside, plus ten cells
        for the pointers.

        The main advantage of the pointer array is that the rows of the array may
        be different lengths

        The most frequent use of array of pointers is to store character strings
        of diverse lengths
                Ex: char *name[] { "Illegal month", "Jan", "Feb", "Mar" };

5.10: Command-line Arguments
        There is a way to pass command-line arguments or parameters to a
        program when it begins executing.

        When main is called, it is called with two arguments.
        
        argc - argument count
                Number of command-line arguments the program was invoked with;
        argv - argument vector
                A pointer to an array of character strings that contain the
                arguments, on per string.

        Ex: echo hello, world - prints hello world
                argv[0] - the name by which the program was invoked
                argv[1] - hello,
                argv[2] - world

                argc is 3 in this case.

        See example/echo.c

        The standard requires that argv[argc] be a null pointer.

        strstr(s,t) returns a pointer to the first occurrence of the string
        t in the string s, or NULL if there is none.

        Common conventions for C programs on UNIX systems dictate that
        an argument that begins with a minus sign introduces an optional flag
        or parameters. These can be used to alter the behavior of the program.

        Optional arguments should be permitted in any order, and the rest of the
        program should be independent of the number of arguments that were present.

        If possible, arguments should be able to be combined.

        Ex: find - grep expanded
                Two optional flags
                        -x: print all lines except those that match the pattern
                        -n: precede each print line by its line number

                The optional flags should be able to be combined and still work as
                expected.

        See example/find.c

5.11: Pointers to Functions
        A function itself is not a variable, but it is possible to define
        pointers to functions, which can be assigned, placed in arrays,
        passed to functions, returned by functions, and so on.

        This will be shown by modifying sort.
        The sorting algorithm is independent of the comparison and
        exchange operations, so by passing different comparison and
        exchange functions to it, we can arrange to sort by different criteria

        See example/sort-with-function-pointer.c

        In the call to qsort, strcmp and numcmp are addresses of functions. Since
        they are known to be functions the & operator is not necessary.

        Qsort can process any data type, since it just reorders data and doesn't
        need to know what kind of data its sorting.

        Void * is used to allow any kind of data to be used in a function.

        int (*comp)(void*, void*)
                comp is a pointer to a function that has two void* arguments
                and returns an int.

                Used in qsort to control the comparison function
                        strcmp or numcmp

        if ((*comp)(v[i], v[left]) < 0)
                comp function is dereferenced, called with the
                the arguments v[i] and v[left] and returns
                an integer.

        Parenthesis around comp and the function arguments is required
        or C will think you are trying to declare another function
